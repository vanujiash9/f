/**
 * Trang Web Ch√∫c M·ª´ng T·ªët Nghi·ªáp - JavaScript
 * Phi√™n b·∫£n m·ªõi, m√£ ngu·ªìn c·∫•u tr√∫c theo c√°c module ch·ª©c nƒÉng
 */

// ==============================================
// KH·ªûI T·∫†O ·ª®NG D·ª§NG & BI·∫æN TO√ÄN C·ª§C
// ==============================================
const App = {
    // Bi·∫øn qu·∫£n l√Ω tr·∫°ng th√°i
    state: {
      currentSection: 0,
      totalSections: 4, // Video, Quiz, Memory Game, Puzzle
    },
    
    // C√°c ƒë·ªëi t∆∞·ª£ng DOM ch√≠nh
    elements: {
      sections: document.querySelectorAll('.section'),
      progressBar: document.getElementById('progress-bar'),
      backgroundMusic: document.getElementById('background-music'),
      playButton: document.getElementById('play-button'),
      pauseButton: document.getElementById('pause-button'),
      weatherControls: document.querySelector('.weather-controls'),
      extraControls: document.getElementById('extra-controls'),
    },
    
    // C√°c module ch·ª©c nƒÉng
    modules: {},
    
    // Kh·ªüi t·∫°o ·ª©ng d·ª•ng
    init() {
      // Thi·∫øt l·∫≠p audio
      this.setupAudio();
      
      // Thi·∫øt l·∫≠p ƒëi·ªÅu khi·ªÉn th·ªùi ti·∫øt
      this.setupWeatherControls();
      
      // Kh·ªüi t·∫°o ti·∫øn tr√¨nh
      this.updateProgress();
      
      // Kh·ªüi t·∫°o c√°c module
      this.initModules();
    },
    
    // Thi·∫øt l·∫≠p ƒëi·ªÅu khi·ªÉn √¢m thanh
    setupAudio() {
      const { backgroundMusic, playButton, pauseButton } = this.elements;
      
      // Ph√°t nh·∫°c
      playButton.addEventListener('click', () => {
        backgroundMusic.play().catch(e => {
          console.log('Audio play prevented by browser:', e);
        });
      });
      
      // T·∫°m d·ª´ng nh·∫°c
      pauseButton.addEventListener('click', () => {
        backgroundMusic.pause();
      });
      
      // Th·ª≠ ph√°t nh·∫°c t·ª± ƒë·ªông (c√≥ th·ªÉ b·ªã ch·∫∑n b·ªüi tr√¨nh duy·ªát)
      backgroundMusic.volume = 0.5;
      backgroundMusic.play().catch(e => {
        console.log('Autoplay prevented by browser:', e);
      });
    },
    
    // Thi·∫øt l·∫≠p ƒëi·ªÅu khi·ªÉn th·ªùi ti·∫øt
    setupWeatherControls() {
      // Kh·ªüi t·∫°o c√°c n√∫t ƒëi·ªÅu khi·ªÉn th·ªùi ti·∫øt
      document.querySelectorAll('.weather-button').forEach(button => {
        button.addEventListener('click', () => {
          this.modules.weatherEffect.changeWeather(button.dataset.type);
        });
      });
      
      // ·∫®n ƒëi·ªÅu khi·ªÉn th·ªùi ti·∫øt ban ƒë·∫ßu
      this.elements.weatherControls.style.display = 'none';
    },
    
    // Hi·ªÉn th·ªã section theo ch·ªâ m·ª•c
    showSection(index) {
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªán t·∫°i
      this.state.currentSection = index;
      
      // C·∫≠p nh·∫≠t hi·ªÉn th·ªã c√°c section
      this.elements.sections.forEach((section, i) => {
        if (i === index) {
          section.classList.add('active');
        } else {
          section.classList.remove('active');
        }
      });
      
      // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
      this.updateProgress();
    },
    
    // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
    updateProgress() {
      const { currentSection } = this.state;
      const { totalSections } = this.state;
      const progress = ((currentSection + 1) / totalSections) * 100;
      this.elements.progressBar.style.width = `${progress}%`;
    },
    
    // Kh·ªüi t·∫°o c√°c module ch·ª©c nƒÉng
    initModules() {
      // Kh·ªüi t·∫°o c√°c module
      this.modules.videoSection = VideoSection;
      this.modules.quizSection = QuizSection;
      this.modules.memoryGame = MemoryGame;
      this.modules.puzzleGame = PuzzleGame;
      this.modules.passwordScreen = PasswordScreen;
      this.modules.gallery3D = Gallery3D;
      this.modules.karaoke = Karaoke;
      this.modules.certificate = Certificate;
      this.modules.weatherEffect = WeatherEffect;
      this.modules.fireworks = Fireworks3D;
      this.modules.extraControls = ExtraControls;
      
      // Kh·ªüi ch·∫°y c√°c module
      Object.values(this.modules).forEach(module => {
        if (typeof module.init === 'function') {
          module.init();
        }
      });
    }
  };
  
  // ==============================================
  // MODULE: SECTION VIDEO
  // ==============================================
  const VideoSection = {
    init() {
      const videoCompleteBtn = document.getElementById('video-complete-btn');
      
      videoCompleteBtn.addEventListener('click', () => {
        // Chuy·ªÉn ƒë·∫øn section ti·∫øp theo
        App.showSection(App.state.currentSection + 1);
        
        // B·∫Øt ƒë·∫ßu tr·∫Øc nghi·ªám
        QuizSection.showQuestion();
      });
    }
  };
  
  // ==============================================
  // MODULE: QUIZ SECTION
  // ==============================================
  const QuizSection = {
    // D·ªØ li·ªáu tr·∫Øc nghi·ªám
    data: {
      questions: [
        {
          question: "N·ªØ v√† Nh∆∞ t·ªët nghi·ªáp ng√†nh g√¨?",
          options: ["C√¥ng ngh·ªá th√¥ng tin", "Thi·∫øt k·∫ø ƒë·ªì h·ªça", "Qu·∫£n tr·ªã kinh doanh", "Marketing"],
          correct: 1
        },
        {
          question: "N·ªØ v√† Nh∆∞ ƒë√£ h·ªçc m·∫•y nƒÉm t·∫°i FPT Polytechnic?",
          options: ["1 nƒÉm", "2 nƒÉm", "3 nƒÉm", "4 nƒÉm"],
          correct: 1
        },
        {
          question: "Hai b·∫°n ƒë√£ th·ª±c hi·ªán ƒë·ªì √°n t·ªët nghi·ªáp v·ªÅ ch·ªß ƒë·ªÅ g√¨?",
          options: ["Thi·∫øt k·∫ø website", "Thi·∫øt k·∫ø nh√¢n v·∫≠t game", "Thi·∫øt k·∫ø b·ªô nh·∫≠n di·ªán th∆∞∆°ng hi·ªáu", "Thi·∫øt k·∫ø ·ª©ng d·ª•ng di ƒë·ªông"],
          correct: 2
        }
      ],
      currentQuestion: 0,
      score: 0
    },
    
    // C√°c ph·∫ßn t·ª≠ DOM
    elements: {
      container: document.getElementById('quiz-container'),
      question: document.getElementById('question'),
      options: document.getElementById('options'),
      nextButton: document.getElementById('next-question'),
      quizResult: document.getElementById('quiz-result')
    },
    
    // Kh·ªüi t·∫°o module
    init() {
      // G·∫Øn s·ª± ki·ªán cho n√∫t chuy·ªÉn c√¢u h·ªèi
      this.elements.nextButton.addEventListener('click', () => {
        this.data.currentQuestion++;
        this.showQuestion();
      });
    },
    
    // Hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i
    showQuestion() {
      const { question, options, nextButton, quizResult } = this.elements;
      const { questions, currentQuestion } = this.data;
      
      if (currentQuestion < questions.length) {
        const currentQuiz = questions[currentQuestion];
        
        // Hi·ªÉn th·ªã c√¢u h·ªèi
        question.textContent = currentQuiz.question;
        
        // T·∫°o c√°c ph∆∞∆°ng √°n
        options.innerHTML = '';
        currentQuiz.options.forEach((option, index) => {
          const optionElement = document.createElement('div');
          optionElement.className = 'option';
          optionElement.textContent = option;
          optionElement.dataset.index = index;
          optionElement.addEventListener('click', e => this.checkAnswer(e));
          options.appendChild(optionElement);
        });
        
        // ·∫®n n√∫t ti·∫øp theo v√† k·∫øt qu·∫£
        nextButton.style.display = 'none';
        quizResult.style.display = 'none';
      }
    },
    
    // Ki·ªÉm tra c√¢u tr·∫£ l·ªùi
    checkAnswer(e) {
      const selectedOption = e.target;
      const selectedAnswer = parseInt(selectedOption.dataset.index);
      const { questions, currentQuestion } = this.data;
      const correctAnswer = questions[currentQuestion].correct;
      const { nextButton, quizResult, options } = this.elements;
      
      // V√¥ hi·ªáu h√≥a t·∫•t c·∫£ c√°c ph∆∞∆°ng √°n
      options.querySelectorAll('.option').forEach(option => {
        option.removeEventListener('click', this.checkAnswer);
        option.style.cursor = 'default';
      });
      
      // Ki·ªÉm tra ƒë√°p √°n
      if (selectedAnswer === correctAnswer) {
        selectedOption.classList.add('correct');
        quizResult.textContent = 'ƒê√∫ng r·ªìi! +1 ƒëi·ªÉm';
        quizResult.style.color = '#28a745';
        this.data.score++;
      } else {
        selectedOption.classList.add('incorrect');
        options.querySelectorAll('.option')[correctAnswer].classList.add('correct');
        quizResult.textContent = 'Sai r·ªìi!';
        quizResult.style.color = '#dc3545';
      }
      
      // Hi·ªÉn th·ªã k·∫øt qu·∫£
      quizResult.style.display = 'block';
      
      // X·ª≠ l√Ω ti·∫øp theo
      if (currentQuestion < questions.length - 1) {
        nextButton.style.display = 'block';
      } else {
        // Ho√†n th√†nh tr·∫Øc nghi·ªám
        setTimeout(() => {
          this.showFinalResult();
        }, 1500);
      }
    },
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    showFinalResult() {
      const { score, questions } = this.data;
      const { container } = this.elements;
      
      container.innerHTML = `
        <h2 style="color: #ff6f91; text-align: center;">K·∫øt Qu·∫£ Tr·∫Øc Nghi·ªám</h2>
        <p style="font-size: 1.2em; text-align: center;">B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng ${score}/${questions.length} c√¢u h·ªèi!</p>
        <button class="button" id="continue-after-quiz">Ti·∫øp t·ª•c h√†nh tr√¨nh!</button>
      `;
      
      document.getElementById('continue-after-quiz').addEventListener('click', () => {
        // Chuy·ªÉn ƒë·∫øn ph·∫ßn ti·∫øp theo
        App.showSection(App.state.currentSection + 1);
      });
    }
  };
  
  // ==============================================
  // MODULE: MEMORY GAME
  // ==============================================
  const MemoryGame = {
    // D·ªØ li·ªáu game
    data: {
      emojis: ['üéì', 'üéâ', 'üéä', 'üíñ', '‚ú®', 'üåü', 'üìö', 'üéØ'],
      flippedCards: [],
      matchedPairs: 0,
      canFlip: true
    },
    
    // C√°c ph·∫ßn t·ª≠ DOM
    elements: {
      gameContainer: document.querySelector('.memory-game'),
      scoreDisplay: document.getElementById('memory-score')
    },
    
    // Kh·ªüi t·∫°o module
    init() {
      this.createCards();
    },
    
    // T·∫°o c√°c th·∫ª b√†i
    createCards() {
      const { gameContainer } = this.elements;
      const { emojis } = this.data;
      
      // T·∫°o m·∫£ng ch·ª©a t·∫•t c·∫£ c√°c emoji (m·ªói emoji 2 l·∫ßn)
      const allCards = [...emojis, ...emojis];
      
      // X√°o tr·ªôn m·∫£ng
      const shuffledCards = this.shuffleArray(allCards);
      
      // X√≥a c√°c th·∫ª c≈©
      gameContainer.innerHTML = '';
      
      // T·∫°o c√°c th·∫ª b√†i
      shuffledCards.forEach((emoji, index) => {
        const card = document.createElement('div');
        card.className = 'memory-card';
        card.dataset.value = emoji;
        card.dataset.index = index;
        
        const front = document.createElement('div');
        front.className = 'memory-card-front';
        front.textContent = '?';
        
        const back = document.createElement('div');
        back.className = 'memory-card-back';
        back.textContent = emoji;
        
        card.appendChild(front);
        card.appendChild(back);
        
        card.addEventListener('click', e => this.flipCard(e));
        gameContainer.appendChild(card);
      });
    },
    
    // X√°o tr·ªôn m·∫£ng
    shuffleArray(array) {
      const newArray = [...array];
      for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
      }
      return newArray;
    },
    
    // L·∫≠t th·∫ª b√†i
    flipCard(e) {
      const card = e.currentTarget;
      const { flippedCards, canFlip } = this.data;
      
      // Ki·ªÉm tra xem c√≥ th·ªÉ l·∫≠t ƒë∆∞·ª£c th·∫ª hay kh√¥ng
      if (!canFlip || flippedCards.includes(card) || card.classList.contains('flipped')) {
        return;
      }
      
      // L·∫≠t th·∫ª
      card.classList.add('flipped');
      flippedCards.push(card);
      
      // N·∫øu ƒë√£ l·∫≠t 2 th·∫ª, ki·ªÉm tra kh·ªõp
      if (flippedCards.length === 2) {
        this.data.canFlip = false;
        this.checkForMatch();
      }
    },
    
    // Ki·ªÉm tra c·∫∑p th·∫ª tr√πng kh·ªõp
    checkForMatch() {
      const [card1, card2] = this.data.flippedCards;
      const { scoreDisplay } = this.elements;
      
      if (card1.dataset.value === card2.dataset.value) {
        // T√¨m th·∫•y c·∫∑p tr√πng kh·ªõp
        this.data.flippedCards = [];
        this.data.canFlip = true;
        this.data.matchedPairs++;
        
        // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë
        scoreDisplay.textContent = `S·ªë c·∫∑p ƒë√£ t√¨m th·∫•y: ${this.data.matchedPairs}/8`;
        
        // Ki·ªÉm tra ho√†n th√†nh
        if (this.data.matchedPairs === 8) {
          setTimeout(() => {
            this.completeGame();
          }, 1000);
        }
      } else {
        // Kh√¥ng tr√πng kh·ªõp
        setTimeout(() => {
          card1.classList.remove('flipped');
          card2.classList.remove('flipped');
          this.data.flippedCards = [];
          this.data.canFlip = true;
        }, 1000);
      }
    },
    
    // Ho√†n th√†nh tr√≤ ch∆°i
    completeGame() {
      const container = document.querySelector('#section-memory');
      
      container.innerHTML = `
        <h2 class="section-title">Tuy·ªát v·ªùi!</h2>
        <p class="section-description">B·∫°n ƒë√£ t√¨m th·∫•y t·∫•t c·∫£ c√°c c·∫∑p!</p>
        <button class="button" id="continue-after-memory">Ti·∫øp t·ª•c h√†nh tr√¨nh!</button>
      `;
      
      document.getElementById('continue-after-memory').addEventListener('click', () => {
        // Chuy·ªÉn ƒë·∫øn ph·∫ßn ti·∫øp theo
        App.showSection(App.state.currentSection + 1);
        
        // B·∫Øt ƒë·∫ßu ƒë·∫øm gi·ªù cho tr√≤ ch∆°i gh√©p h√¨nh
        PuzzleGame.startTimer();
      });
    }
  };
  
  // ==============================================
  // MODULE: PUZZLE GAME
  // ==============================================
  const PuzzleGame = {
    // D·ªØ li·ªáu game
    data: {
      imageUrl: 'https://images.unsplash.com/photo-1523050854058-8df90110c9f1?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&q=80',
      pieces: [],
      timeLeft: 60,
      gameActive: true,
      skipAttempts: 0,
      timerInterval: null,
      draggedPiece: null,
      initialX: 0,
      initialY: 0
    },
    
    // C√°c ph·∫ßn t·ª≠ DOM
    elements: {
      container: document.getElementById('puzzle-container'),
      timerDisplay: document.getElementById('timer'),
      hintButton: document.getElementById('hint-button'),
      retryButton: document.getElementById('retry-button'),
      skipButton: document.getElementById('skip-button'),
      hintImage: document.getElementById('hint-image')
    },
    
    // Kh·ªüi t·∫°o module
    init() {
      const { hintButton, retryButton, skipButton } = this.elements;
      
      // T·∫°o c√°c m·∫£nh gh√©p
      this.createPuzzlePieces();
      
      // G·∫Øn s·ª± ki·ªán cho n√∫t g·ª£i √Ω
      hintButton.addEventListener('click', () => {
        this.showHint();
      });
      
      // G·∫Øn s·ª± ki·ªán cho n√∫t th·ª≠ l·∫°i
      retryButton.addEventListener('click', () => {
        this.retryGame();
      });
      
      // G·∫Øn s·ª± ki·ªán cho n√∫t b·ªè qua
      skipButton.addEventListener('click', () => {
        this.skipGame();
      });
    },
    
    // T·∫°o c√°c m·∫£nh gh√©p
    createPuzzlePieces() {
      const { container } = this.elements;
      const { imageUrl } = this.data;
      
      // X√≥a m·∫£nh c≈©
      this.data.pieces = [];
      container.innerHTML = '';
      
      // V·ªã tr√≠ b·ªë c·ª•c c·ªßa 9 m·∫£nh gh√©p
      const positions = [
        { x: 0, y: 0 }, { x: -100, y: 0 }, { x: -200, y: 0 },
        { x: 0, y: -100 }, { x: -100, y: -100 }, { x: -200, y: -100 },
        { x: 0, y: -200 }, { x: -100, y: -200 }, { x: -200, y: -200 }
      ];
      
      // X√°o tr·ªôn v·ªã tr√≠
      const shuffledPositions = this.shuffleArray([...positions]);
      
      // T·∫°o c√°c m·∫£nh gh√©p
      positions.forEach((originalPos, i) => {
        const piece = document.createElement('div');
        piece.className = 'puzzle-piece';
        piece.style.backgroundImage = `url(${imageUrl})`;
        piece.style.backgroundPosition = `${originalPos.x}px ${originalPos.y}px`;
        piece.dataset.correctIndex = i;
        
        // T√¨m v·ªã tr√≠ x√°o tr·ªôn c·ªßa m·∫£nh gh√©p
        const shuffledIndex = shuffledPositions.findIndex(
          pos => pos.x === originalPos.x && pos.y === originalPos.y
        );
        
        piece.dataset.currentIndex = shuffledIndex;
        piece.draggable = true;
        container.appendChild(piece);
        this.data.pieces.push(piece);
      });
      
      // Thi·∫øt l·∫≠p k√©o th·∫£
      this.setupDragAndDrop();
    },
    
    // X√°o tr·ªôn m·∫£ng
    shuffleArray(array) {
      const newArray = [...array];
      for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
      }
      return newArray;
    },
    
    // Thi·∫øt l·∫≠p k√©o th·∫£
    setupDragAndDrop() {
      // Thi·∫øt l·∫≠p cho m·ªói m·∫£nh gh√©p
      this.data.pieces.forEach(piece => {
        // S·ª± ki·ªán k√©o cho desktop
        piece.addEventListener('dragstart', (e) => {
          e.dataTransfer.setData('text/plain', piece.dataset.currentIndex);
          piece.style.opacity = '0.5';
        });
        
        piece.addEventListener('dragend', () => {
          piece.style.opacity = '1';
        });
        
        piece.addEventListener('dragover', (e) => {
          e.preventDefault();
        });
        
        piece.addEventListener('drop', (e) => {
          e.preventDefault();
          const draggedIndex = e.dataTransfer.getData('text/plain');
          const targetIndex = piece.dataset.currentIndex;
          
          // Ho√°n ƒë·ªïi v·ªã tr√≠
          this.swapPieces(draggedIndex, targetIndex);
        });
        
        // S·ª± ki·ªán c·∫£m ·ª©ng cho mobile
        piece.addEventListener('touchstart', (e) => this.handleTouchStart(e, piece));
        piece.addEventListener('touchmove', (e) => this.handleTouchMove(e));
        piece.addEventListener('touchend', (e) => this.handleTouchEnd(e));
      });
    },
    
    // X·ª≠ l√Ω s·ª± ki·ªán c·∫£m ·ª©ng b·∫Øt ƒë·∫ßu
    handleTouchStart(e, piece) {
      e.preventDefault();
      
      // L∆∞u m·∫£nh gh√©p ƒëang k√©o
      this.data.draggedPiece = piece;
      
      const rect = piece.getBoundingClientRect();
      const touch = e.touches[0];
      
      // L∆∞u v·ªã tr√≠ ban ƒë·∫ßu
      this.data.initialX = touch.clientX - rect.left;
      this.data.initialY = touch.clientY - rect.top;
      
      // Thi·∫øt l·∫≠p style khi k√©o
      piece.style.position = 'absolute';
      piece.style.zIndex = '1000';
      piece.style.opacity = '0.8';
    },
    
    // X·ª≠ l√Ω s·ª± ki·ªán c·∫£m ·ª©ng di chuy·ªÉn
    handleTouchMove(e) {
      const { draggedPiece, initialX, initialY } = this.data;
      
      if (!draggedPiece) return;
      e.preventDefault();
      
      const touch = e.touches[0];
      
      // C·∫≠p nh·∫≠t v·ªã tr√≠
      draggedPiece.style.left = `${touch.clientX - initialX}px`;
      draggedPiece.style.top = `${touch.clientY - initialY}px`;
    },
    
    // X·ª≠ l√Ω s·ª± ki·ªán c·∫£m ·ª©ng k·∫øt th√∫c
    handleTouchEnd(e) {
      const { draggedPiece } = this.data;
      
      if (!draggedPiece) return;
      e.preventDefault();
      
      // Thi·∫øt l·∫≠p l·∫°i style
      draggedPiece.style.position = '';
      draggedPiece.style.zIndex = '';
      draggedPiece.style.opacity = '1';
      draggedPiece.style.left = '';
      draggedPiece.style.top = '';
      
      // T√¨m m·∫£nh gh√©p ·ªü v·ªã tr√≠ th·∫£
      const touch = e.changedTouches[0];
      const targetElement = document.elementFromPoint(touch.clientX, touch.clientY);
      
      if (targetElement && 
          targetElement.classList.contains('puzzle-piece') && 
          targetElement !== draggedPiece) {
        // Ho√°n ƒë·ªïi v·ªã tr√≠
        this.swapPieces(draggedPiece.dataset.currentIndex, targetElement.dataset.currentIndex);
      }
      
      // X√≥a m·∫£nh gh√©p ƒëang k√©o
      this.data.draggedPiece = null;
    },
    
    // Ho√°n ƒë·ªïi v·ªã tr√≠ hai m·∫£nh gh√©p
    swapPieces(index1, index2) {
      const { pieces } = this.data;
      
      // T√¨m c√°c m·∫£nh gh√©p
      const piece1 = pieces.find(p => p.dataset.currentIndex === index1);
      const piece2 = pieces.find(p => p.dataset.currentIndex === index2);
      
      if (piece1 && piece2) {
        // Ho√°n ƒë·ªïi v·ªã tr√≠
        const tempIndex = piece2.dataset.currentIndex;
        piece2.dataset.currentIndex = piece1.dataset.currentIndex;
        piece1.dataset.currentIndex = tempIndex;
        
        // C·∫≠p nh·∫≠t v·ªã tr√≠
        this.updatePiecePositions();
        
        // Ki·ªÉm tra ho√†n th√†nh
        this.checkWin();
      }
    },
    
    // C·∫≠p nh·∫≠t v·ªã tr√≠ c√°c m·∫£nh gh√©p
    updatePiecePositions() {
      const { pieces } = this.data;
      
      const positions = [
        { x: 0, y: 0 }, { x: -100, y: 0 }, { x: -200, y: 0 },
        { x: 0, y: -100 }, { x: -100, y: -100 }, { x: -200, y: -100 },
        { x: 0, y: -200 }, { x: -100, y: -200 }, { x: -200, y: -200 }
      ];
      
      pieces.forEach(piece => {
        const index = parseInt(piece.dataset.currentIndex);
        if (index >= 0 && index < positions.length) {
          const pos = positions[index];
          piece.style.backgroundPosition = `${pos.x}px ${pos.y}px`;
        }
      });
    },
    
    // Ki·ªÉm tra ho√†n th√†nh
    checkWin() {
      const { pieces, gameActive } = this.data;
      
      // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c m·∫£nh gh√©p ƒë√£ ƒë√∫ng v·ªã tr√≠ ch∆∞a
      const isCorrect = pieces.every(piece => {
        return parseInt(piece.dataset.currentIndex) === parseInt(piece.dataset.correctIndex);
      });
      
      if (isCorrect && gameActive) {
        // D·ª´ng game
        this.data.gameActive = false;
        clearInterval(this.data.timerInterval);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh
        this.showCompletionMessage();
      }
    },
    
    // Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh
    showCompletionMessage() {
      const puzzleSection = document.getElementById('section-puzzle');
      
      puzzleSection.innerHTML = `
        <h2 class="section-title">Tuy·ªát v·ªùi!</h2>
        <p class="section-description">B·∫°n ƒë√£ ho√†n th√†nh gh√©p h√¨nh!</p>
        <button class="button" id="continue-after-puzzle">M·ªü thi·ªáp ch√∫c m·ª´ng!</button>
      `;
      
      document.getElementById('continue-after-puzzle').addEventListener('click', () => {
        // Hi·ªÉn th·ªã m√†n h√¨nh nh·∫≠p m·∫≠t kh·∫©u
        PasswordScreen.show();
      });
    },
    
    // Hi·ªÉn th·ªã g·ª£i √Ω
    showHint() {
      const { hintImage } = this.elements;
      
      hintImage.style.display = 'block';
      setTimeout(() => {
        hintImage.style.display = 'none';
      }, 2000);
    },
    
    // Th·ª≠ l·∫°i tr√≤ ch∆°i
    retryGame() {
      const { retryButton, skipButton, timerDisplay } = this.elements;
      
      // Thi·∫øt l·∫≠p l·∫°i tr·∫°ng th√°i
      this.data.gameActive = true;
      retryButton.style.display = 'none';
      skipButton.style.display = 'none';
      timerDisplay.style.color = '#ff6f91';
      
      // T·∫°o l·∫°i c√°c m·∫£nh gh√©p
      this.createPuzzlePieces();
      
      // B·∫Øt ƒë·∫ßu ƒë·∫øm gi·ªù
      this.startTimer();
    },
    
    // B·ªè qua tr√≤ ch∆°i
    skipGame() {
      const { skipAttempts } = this.data;
      this.data.skipAttempts++;
      
      if (skipAttempts === 0) {
        alert('Hihi, c·ªë l√™n ch√∫t n·ªØa ƒëi! üòú');
      } else if (skipAttempts === 1) {
        alert('Th·∫≠t s·ª± mu·ªën b·ªè qua √†? T·∫°m th·ªùi d·ªÖ d√†ng cho b·∫°n nha! üòä');
        this.data.timeLeft = 10; // Gi·∫£m th·ªùi gian ƒë·ªÉ k·∫øt th√∫c s·ªõm
      } else {
        // D·ª´ng game
        this.data.gameActive = false;
        clearInterval(this.data.timerInterval);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o b·ªè qua
        const puzzleSection = document.getElementById('section-puzzle');
        
        puzzleSection.innerHTML = `
          <h2 class="section-title">ƒê√£ b·ªè qua!</h2>
          <p class="section-description">B·∫°n ƒë√£ b·ªè qua ph·∫ßn gh√©p h√¨nh.</p>
          <p class="section-description" style="color: #ff4d79; font-style: italic; font-weight: bold;">
            ƒê·ªÉ v·∫≠y cho vui th√¥i ch·ª© gh√©p kh√¥ng ƒë∆∞·ª£c ƒë√¢u l√™u l√™u üòú
          </p>
          <button class="button" id="continue-after-puzzle">M·ªü thi·ªáp ch√∫c m·ª´ng!</button>
        `;
        
        document.getElementById('continue-after-puzzle').addEventListener('click', () => {
          // Hi·ªÉn th·ªã m√†n h√¨nh nh·∫≠p m·∫≠t kh·∫©u
          PasswordScreen.show();
        });
      }
    },
    // B·∫Øt ƒë·∫ßu ƒë·∫øm gi·ªù
  startTimer() {
    // Thi·∫øt l·∫≠p th·ªùi gian ban ƒë·∫ßu
    this.data.timeLeft = 60;
    this.elements.timerDisplay.textContent = `Th·ªùi gian: ${this.data.timeLeft}s`;
    this.elements.timerDisplay.style.color = '#ff6f91';
    
    // D·ª´ng b·ªô ƒë·∫øm gi·ªù c≈© n·∫øu c√≥
    clearInterval(this.data.timerInterval);
    
    // B·∫Øt ƒë·∫ßu b·ªô ƒë·∫øm gi·ªù m·ªõi
    this.data.timerInterval = setInterval(() => {
      // Gi·∫£m th·ªùi gian
      this.data.timeLeft--;
      
      // C·∫≠p nh·∫≠t hi·ªÉn th·ªã
      this.elements.timerDisplay.textContent = `Th·ªùi gian: ${this.data.timeLeft}s`;
      
      // C·∫£nh b√°o th·ªùi gian s·∫Øp h·∫øt
      if (this.data.timeLeft <= 10) {
        this.elements.timerDisplay.style.color = '#dc3545';
      }
      
      // Ki·ªÉm tra h·∫øt gi·ªù
      if (this.data.timeLeft <= 0) {
        // D·ª´ng ƒë·∫øm gi·ªù
        clearInterval(this.data.timerInterval);
        
        // Hi·ªÉn th·ªã n√∫t th·ª≠ l·∫°i v√† b·ªè qua
        this.elements.retryButton.style.display = 'inline-block';
        this.elements.skipButton.style.display = 'inline-block';
        
        // Th√¥ng b√°o h·∫øt gi·ªù
        this.elements.timerDisplay.textContent = 'H·∫øt gi·ªù!';
      }
    }, 1000);
  }
};

// ==============================================
// MODULE: M√ÄN H√åNH NH·∫¨P M·∫¨T KH·∫®U
// ==============================================
const PasswordScreen = {
  // D·ªØ li·ªáu c·ªßa module
  data: {
    selectedUser: null,
    passwords: {
      nu: '0123', // M·∫≠t kh·∫©u c·ªßa N·ªØ (ƒë∆°n gi·∫£n h√≥a th√†nh ng√†y sinh)
      nhu: '0123'  // M·∫≠t kh·∫©u c·ªßa Nh∆∞ (ƒë∆°n gi·∫£n h√≥a th√†nh ng√†y sinh)
    }
  },
  
  // C√°c ph·∫ßn t·ª≠ DOM
  elements: {
    section: document.getElementById('section-password'),
    form: document.getElementById('password-form'),
    prompt: document.getElementById('password-prompt'),
    input: document.getElementById('password-input'),
    error: document.getElementById('password-error')
  },
  
  // Kh·ªüi t·∫°o module
  init() {
    // G·∫Øn s·ª± ki·ªán cho n√∫t ch·ªçn ng∆∞·ªùi d√πng
    document.getElementById('select-nu').addEventListener('click', () => {
      this.selectUser('nu');
    });
    
    document.getElementById('select-nhu').addEventListener('click', () => {
      this.selectUser('nhu');
    });
    
    // G·∫Øn s·ª± ki·ªán cho n√∫t x√°c nh·∫≠n m·∫≠t kh·∫©u
    document.getElementById('verify-password').addEventListener('click', () => {
      this.verifyPassword();
    });
    
    // G·∫Øn s·ª± ki·ªán nh·∫•n Enter cho √¥ nh·∫≠p m·∫≠t kh·∫©u
    this.elements.input.addEventListener('keypress', e => {
      if (e.key === 'Enter') {
        this.verifyPassword();
      }
    });
  },
  
  // Hi·ªÉn th·ªã m√†n h√¨nh nh·∫≠p m·∫≠t kh·∫©u
  show() {
    // ·∫®n t·∫•t c·∫£ c√°c section
    App.elements.sections.forEach(section => {
      section.classList.remove('active');
    });
    
    // Hi·ªÉn th·ªã section m·∫≠t kh·∫©u
    this.elements.section.style.display = 'block';
  },
  
  // Ch·ªçn ng∆∞·ªùi d√πng
  selectUser(user) {
    this.data.selectedUser = user;
    
    // C·∫≠p nh·∫≠t l·ªùi nh·∫Øc
    if (user === 'nu') {
      this.elements.prompt.textContent = 'Ch√†o N·ªØ! H√£y nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n (g·ª£i √Ω: ng√†y sinh c·ªßa b·∫°n - v√≠ d·ª•: 0123)';
    } else {
      this.elements.prompt.textContent = 'Ch√†o Nh∆∞! H√£y nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n (g·ª£i √Ω: ng√†y sinh c·ªßa b·∫°n - v√≠ d·ª•: 0123)';
    }
    
    // Hi·ªÉn th·ªã form nh·∫≠p m·∫≠t kh·∫©u
    this.elements.form.style.display = 'block';
    
    // ·∫®n th√¥ng b√°o l·ªói
    this.elements.error.style.display = 'none';
    
    // Focus v√†o √¥ nh·∫≠p m·∫≠t kh·∫©u
    this.elements.input.focus();
  },
  
  // X√°c minh m·∫≠t kh·∫©u
  verifyPassword() {
    const { input, error } = this.elements;
    const { selectedUser, passwords } = this.data;
    
    // L·∫•y m·∫≠t kh·∫©u ƒë√£ nh·∫≠p
    const password = input.value.trim();
    
    if (password === passwords[selectedUser]) {
      // M·∫≠t kh·∫©u ƒë√∫ng
      // ·∫®n th√¥ng b√°o l·ªói
      error.style.display = 'none';
      
      // Hi·ªÉn th·ªã thi·ªáp ch√∫c m·ª´ng
      this.showGreetingCards(selectedUser);
    } else {
      // M·∫≠t kh·∫©u sai
      error.style.display = 'block';
      
      // X√≥a √¥ nh·∫≠p m·∫≠t kh·∫©u
      input.value = '';
      
      // Focus v√†o √¥ nh·∫≠p m·∫≠t kh·∫©u
      input.focus();
    }
  },
  
  // Hi·ªÉn th·ªã thi·ªáp ch√∫c m·ª´ng
  showGreetingCards(user) {
    // ·∫®n section m·∫≠t kh·∫©u
    this.elements.section.style.display = 'none';
    
    // Hi·ªÉn th·ªã thi·ªáp ch√∫c m·ª´ng
    const cardContainer = document.querySelector('.card-container');
    cardContainer.style.display = 'flex';
    
    // L·ªçc v√† hi·ªÉn th·ªã c√°c thi·ªáp ph√π h·ª£p
    const cards = document.querySelectorAll('.card');
    cards.forEach(card => {
      const title = card.querySelector('h2').textContent.toLowerCase();
      
      if (title.includes(user)) {
        card.style.display = 'block';
      } else {
        card.style.display = 'none';
      }
    });
    
    // Hi·ªÉn th·ªã c√°c ƒëi·ªÅu khi·ªÉn b·ªï sung
    App.elements.extraControls.style.display = 'block';
    
    // K√≠ch ho·∫°t hi·ªáu ·ª©ng ph√°o hoa
    App.modules.fireworks.start();
  }
};

// ==============================================
// MODULE: GALLERY 3D
// ==============================================
const Gallery3D = {
  // D·ªØ li·ªáu c·ªßa module
  data: {
    rotation: 0,
    isActive: false
  },
  
  // C√°c ph·∫ßn t·ª≠ DOM
  elements: {
    section: document.getElementById('section-gallery'),
    scene: document.querySelector('.gallery-scene')
  },
  
  // Kh·ªüi t·∫°o module
  init() {
    // G·∫Øn s·ª± ki·ªán cho n√∫t hi·ªÉn th·ªã gallery
    document.getElementById('show-gallery').addEventListener('click', () => {
      this.show();
    });
    
    // G·∫Øn s·ª± ki·ªán cho n√∫t ƒëi·ªÅu khi·ªÉn
    document.getElementById('gallery-left').addEventListener('click', () => {
      this.rotate(-90);
    });
    
    document.getElementById('gallery-right').addEventListener('click', () => {
      this.rotate(90);
    });
    
    document.getElementById('gallery-exit').addEventListener('click', () => {
      this.hide();
    });
    
    // Thi·∫øt l·∫≠p s·ª± ki·ªán ph√≠m m≈©i t√™n
    window.addEventListener('keydown', e => {
      if (!this.data.isActive) return;
      
      if (e.key === 'ArrowLeft') {
        this.rotate(-90);
      } else if (e.key === 'ArrowRight') {
        this.rotate(90);
      } else if (e.key === 'Escape') {
        this.hide();
      }
    });
    
    // S·ª± ki·ªán c·∫£m ·ª©ng cho ƒëi·ªán tho·∫°i
    let touchStartX = 0;
    
    this.elements.scene.addEventListener('touchstart', e => {
      touchStartX = e.touches[0].clientX;
    });
    
    this.elements.scene.addEventListener('touchend', e => {
      const touchEndX = e.changedTouches[0].clientX;
      const diff = touchEndX - touchStartX;
      
      if (diff > 50) {
        // Vu·ªët ph·∫£i
        this.rotate(-90);
      } else if (diff < -50) {
        // Vu·ªët tr√°i
        this.rotate(90);
      }
    });
  },
  
  // Hi·ªÉn th·ªã gallery
  show() {
    // ·∫®n t·∫•t c·∫£ c√°c section
    App.elements.sections.forEach(section => {
      section.classList.remove('active');
    });
    
    // Hi·ªÉn th·ªã section gallery
    this.elements.section.classList.add('active');
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    this.data.isActive = true;
  },
  
  // ·∫®n gallery
  hide() {
    // ·∫®n section gallery
    this.elements.section.classList.remove('active');
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    this.data.isActive = false;
  },
  
  // Xoay gallery
  rotate(angle) {
    // C·∫≠p nh·∫≠t g√≥c xoay
    this.data.rotation += angle;
    
    // √Åp d·ª•ng g√≥c xoay
    this.elements.scene.style.transform = `rotateY(${this.data.rotation}deg)`;
  }
};

// ==============================================
// MODULE: KARAOKE
// ==============================================
const Karaoke = {
  // D·ªØ li·ªáu c·ªßa module
  data: {
    lyrics: [
      { time: 0, text: "Ch√∫c m·ª´ng b·∫°n ƒë√£ t·ªët nghi·ªáp h√¥m nay" },
      { time: 5, text: "Nh·ªØng nƒÉm th√°ng h·ªçc t·∫≠p ƒë√£ th√†nh c√¥ng r·ªìi" },
      { time: 10, text: "Gi·ªù ƒë√¢y b·∫°n ƒë√£ s·∫µn s√†ng b∆∞·ªõc ti·∫øp" },
      { time: 15, text: "T∆∞∆°ng lai t∆∞∆°i s√°ng ƒëang ch·ªù ph√≠a tr∆∞·ªõc" },
      { time: 20, text: "FPT Polytechnic ƒë√£ d·∫°y cho b·∫°n" },
      { time: 25, text: "Nh·ªØng k·ªπ nƒÉng qu√Ω gi√° cho ƒë·ªùi" },
      { time: 30, text: "N·ªØ v√† Nh∆∞ ∆°i, h√£y lu√¥n t·ª± tin" },
      { time: 35, text: "Ch√∫ng t√¥i lu√¥n t·ª± h√†o v·ªÅ hai b·∫°n" },
      { time: 40, text: "Gi·ªù ƒë√¢y con ƒë∆∞·ªùng ƒë√£ r·ªông m·ªü" },
      { time: 45, text: "H√£y v·ªØng b∆∞·ªõc v√† kh√¥ng ng·ª´ng ph·∫•n ƒë·∫•u" },
      { time: 50, text: "Ch√∫c m·ª´ng t·ªët nghi·ªáp, h√¥ l√™n n√†o!" },
      { time: 55, text: "T·ªët nghi·ªáp r·ªìi! Hoan h√¥!" }
    ],
    audio: new Audio('https://www.bensound.com/bensound-music/bensound-happyrock.mp3'),
    currentLine: 0,
    isPlaying: false,
    progressInterval: null
  },
  
  // C√°c ph·∫ßn t·ª≠ DOM
  elements: {
    section: document.getElementById('section-karaoke'),
    currentLine: document.querySelector('.current-line'),
    nextLine: document.querySelector('.next-line'),
    progressBar: document.getElementById('karaoke-progress-bar'),
    volumeSlider: document.getElementById('volume-slider')
  },
  
  // Kh·ªüi t·∫°o module
  init() {
    // Thi·∫øt l·∫≠p √¢m l∆∞·ª£ng ban ƒë·∫ßu
    this.data.audio.volume = 0.7;
    
    // G·∫Øn s·ª± ki·ªán cho n√∫t hi·ªÉn th·ªã karaoke
    document.getElementById('show-karaoke').addEventListener('click', () => {
      this.show();
    });
    
    // G·∫Øn s·ª± ki·ªán cho n√∫t ph√°t/d·ª´ng
    document.getElementById('play-karaoke').addEventListener('click', () => {
      this.play();
    });
    
    document.getElementById('stop-karaoke').addEventListener('click', () => {
      this.stop();
    });
    
    // G·∫Øn s·ª± ki·ªán cho thanh ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng
    this.elements.volumeSlider.addEventListener('input', () => {
      const volume = parseFloat(this.elements.volumeSlider.value);
      this.data.audio.volume = volume;
    });
    
    // G·∫Øn s·ª± ki·ªán k·∫øt th√∫c audio
    this.data.audio.addEventListener('ended', () => {
      this.stop();
    });
  },
  
  // Hi·ªÉn th·ªã karaoke
  show() {
    // ·∫®n t·∫•t c·∫£ c√°c section
    App.elements.sections.forEach(section => {
      section.classList.remove('active');
    });
    
    // Hi·ªÉn th·ªã section karaoke
    this.elements.section.classList.add('active');
    
    // Hi·ªÉn th·ªã l·ªùi b√†i h√°t ban ƒë·∫ßu
    this.updateLyrics(0);
  },
  
  // Ph√°t karaoke
  play() {
    // Hi·ªÉn th·ªã/·∫©n n√∫t ƒëi·ªÅu khi·ªÉn
    document.getElementById('play-karaoke').style.display = 'none';
    document.getElementById('stop-karaoke').style.display = 'inline-block';
    
    // Ph√°t nh·∫°c
    this.data.audio.currentTime = 0;
    this.data.audio.play().catch(e => {
      console.log('Audio play prevented by browser:', e);
    });
    
    // Thi·∫øt l·∫≠p tr·∫°ng th√°i
    this.data.isPlaying = true;
    this.data.currentLine = 0;
    
    // C·∫≠p nh·∫≠t l·ªùi b√†i h√°t
    this.updateLyrics(0);
    
    // B·∫Øt ƒë·∫ßu ki·ªÉm tra ti·∫øn ƒë·ªô
    this.startProgressCheck();
  },
  
  // D·ª´ng karaoke
  stop() {
    // Hi·ªÉn th·ªã/·∫©n n√∫t ƒëi·ªÅu khi·ªÉn
    document.getElementById('play-karaoke').style.display = 'inline-block';
    document.getElementById('stop-karaoke').style.display = 'none';
    
    // D·ª´ng nh·∫°c
    this.data.audio.pause();
    
    // Thi·∫øt l·∫≠p tr·∫°ng th√°i
    this.data.isPlaying = false;
    
    // D·ª´ng ki·ªÉm tra ti·∫øn ƒë·ªô
    clearInterval(this.data.progressInterval);
    
    // ƒê·∫∑t l·∫°i thanh ti·∫øn tr√¨nh
    this.elements.progressBar.style.width = '0%';
  },
  
  // B·∫Øt ƒë·∫ßu ki·ªÉm tra ti·∫øn ƒë·ªô
  startProgressCheck() {
    // D·ª´ng interval c≈© n·∫øu c√≥
    clearInterval(this.data.progressInterval);
    
    // T·∫°o interval m·ªõi
    this.data.progressInterval = setInterval(() => {
      // L·∫•y th·ªùi gian hi·ªán t·∫°i
      const currentTime = this.data.audio.currentTime;
      
      // T√≠nh to√°n ph·∫ßn trƒÉm ti·∫øn ƒë·ªô
      const duration = this.data.audio.duration || 60;
      const progress = (currentTime / duration) * 100;
      
      // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
      this.elements.progressBar.style.width = `${progress}%`;
      
      // C·∫≠p nh·∫≠t l·ªùi b√†i h√°t
      this.updateLyricsBasedOnTime(currentTime);
    }, 100);
  },
  
  // C·∫≠p nh·∫≠t l·ªùi b√†i h√°t d·ª±a tr√™n th·ªùi gian
  updateLyricsBasedOnTime(currentTime) {
    const { lyrics } = this.data;
    
    // T√¨m d√≤ng l·ªùi b√†i h√°t hi·ªán t·∫°i
    for (let i = lyrics.length - 1; i >= 0; i--) {
      if (currentTime >= lyrics[i].time) {
        if (this.data.currentLine !== i) {
          this.data.currentLine = i;
          this.updateLyrics(i);
        }
        break;
      }
    }
  },
  
  // C·∫≠p nh·∫≠t hi·ªÉn th·ªã l·ªùi b√†i h√°t
  updateLyrics(index) {
    const { lyrics } = this.data;
    const { currentLine, nextLine } = this.elements;
    
    // Hi·ªÉn th·ªã d√≤ng hi·ªán t·∫°i
    currentLine.textContent = lyrics[index].text;
    
    // Hi·ªÉn th·ªã d√≤ng ti·∫øp theo n·∫øu c√≥
    if (index < lyrics.length - 1) {
      nextLine.textContent = lyrics[index + 1].text;
    } else {
      nextLine.textContent = '';
    }
  }
};

// ==============================================
// MODULE: CERTIFICATE GENERATOR
// ==============================================
const Certificate = {
  // D·ªØ li·ªáu c·ªßa module
  data: {
    currentName: '',
    currentType: '',
    currentMessage: ''
  },
  
  // C√°c ph·∫ßn t·ª≠ DOM
  elements: {
    section: document.getElementById('section-certificate'),
    form: document.querySelector('.certificate-form'),
    container: document.querySelector('.certificate-container'),
    certName: document.getElementById('cert-name'),
    certType: document.getElementById('cert-type'),
    certMessage: document.getElementById('cert-message'),
    certDate: document.getElementById('cert-date')
  },
  
  // Kh·ªüi t·∫°o module
  init() {
    // G·∫Øn s·ª± ki·ªán cho n√∫t hi·ªÉn th·ªã certificate
    document.getElementById('show-certificate').addEventListener('click', () => {
      this.show();
    });
    
    // G·∫Øn s·ª± ki·ªán cho n√∫t t·∫°o ch·ª©ng ch·ªâ
    document.getElementById('generate-certificate').addEventListener('click', () => {
      this.generateCertificate();
    });
    
    // G·∫Øn s·ª± ki·ªán cho n√∫t in ch·ª©ng ch·ªâ
    document.getElementById('print-certificate').addEventListener('click', () => {
      this.printCertificate();
    });
    
    // G·∫Øn s·ª± ki·ªán cho n√∫t t·∫°o ch·ª©ng ch·ªâ m·ªõi
    document.getElementById('new-certificate').addEventListener('click', () => {
      this.showForm();
    });
  },
  
  // Hi·ªÉn th·ªã module
  show() {
    // ·∫®n t·∫•t c·∫£ c√°c section
    App.elements.sections.forEach(section => {
      section.classList.remove('active');
    });
    
    // Hi·ªÉn th·ªã section certificate
    this.elements.section.classList.add('active');
    
    // Hi·ªÉn th·ªã form
    this.showForm();
  },
  
  // Hi·ªÉn th·ªã form t·∫°o ch·ª©ng ch·ªâ
  showForm() {
    // Hi·ªÉn th·ªã form
    this.elements.form.style.display = 'flex';
    
    // ·∫®n container ch·ª©ng ch·ªâ
    this.elements.container.style.display = 'none';
    
    // X√≥a d·ªØ li·ªáu c≈©
    document.getElementById('certificate-name').value = '';
    document.getElementById('certificate-type').value = '';
    document.getElementById('certificate-message').value = '';
  },
  
  // T·∫°o ch·ª©ng ch·ªâ
  generateCertificate() {
    // L·∫•y d·ªØ li·ªáu t·ª´ form
    const name = document.getElementById('certificate-name').value.trim();
    const type = document.getElementById('certificate-type').value;
    const message = document.getElementById('certificate-message').value.trim();
    
    // Ki·ªÉm tra d·ªØ li·ªáu
    if (!name || !type) {
      alert('Vui l√≤ng nh·∫≠p t√™n v√† ch·ªçn lo·∫°i ch·ª©ng ch·ªâ!');
      return;
    }
    
    // L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i
    this.data.currentName = name;
    this.data.currentType = type;
    this.data.currentMessage = message;
    
    // C·∫≠p nh·∫≠t ch·ª©ng ch·ªâ
    this.elements.certName.textContent = name;
    this.elements.certType.textContent = type;
    this.elements.certMessage.textContent = message;
    
    // C·∫≠p nh·∫≠t ng√†y th√°ng
    const date = new Date();
    const formattedDate = `Ng√†y ${date.getDate()} th√°ng ${date.getMonth() + 1} nƒÉm ${date.getFullYear()}`;
    this.elements.certDate.textContent = formattedDate;
    
    // ·∫®n form
    this.elements.form.style.display = 'none';
    
    // Hi·ªÉn th·ªã container ch·ª©ng ch·ªâ
    this.elements.container.style.display = 'block';
  },
  
  // In ch·ª©ng ch·ªâ
  printCertificate() {
    // T·∫°o m·ªôt c·ª≠a s·ªï m·ªõi ƒë·ªÉ in
    const printWindow = window.open('', '_blank');
    
    // T·∫°o n·ªôi dung HTML ƒë·ªÉ in
    const certificateHTML = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Ch·ª©ng Ch·ªâ - ${this.data.currentName}</title>
        <style>
          body {
            font-family: 'Arial', sans-serif;
            text-align: center;
            padding: 20px;
          }
          .certificate {
            border: 10px solid #ff6f91;
            padding: 20px;
            width: 600px;
            margin: 0 auto;
            background-color: #fff;
          }
          .certificate-header {
            margin-bottom: 30px;
          }
          .certificate-title {
            font-size: 32px;
            color: #ff6f91;
            margin-bottom: 10px;
          }
          .certificate-subtitle {
            font-size: 20px;
            color: #444;
          }
          .certificate-content {
            margin: 40px 0;
          }
          .certificate-name {
            font-size: 28px;
            color: #333;
            margin-bottom: 20px;
          }
          .certificate-text {
            font-size: 18px;
            line-height: 1.5;
            margin-bottom: 15px;
          }
          .certificate-footer {
            display: flex;
            justify-content: space-between;
            margin-top: 40px;
          }
          .certificate-date, .certificate-signature {
            font-size: 16px;
            color: #666;
          }
        </style>
      </head>
      <body>
        <div class="certificate">
          <div class="certificate-header">
            <h2 class="certificate-title">Ch·ª©ng Ch·ªâ Vinh Danh</h2>
            <p class="certificate-subtitle">FPT Polytechnic</p>
          </div>
          
          <div class="certificate-content">
            <h3 class="certificate-name">${this.data.currentName}</h3>
            <p class="certificate-text">
              ƒê∆∞·ª£c trao danh hi·ªáu "${this.data.currentType}" 
              v·ªõi l√≤ng bi·∫øt ∆°n v√† s·ª± tr√¢n tr·ªçng v√¥ c√πng.
            </p>
            <p class="certificate-text">${this.data.currentMessage}</p>
          </div>
          
          <div class="certificate-footer">
            <div class="certificate-date">${this.elements.certDate.textContent}</div>
            <div class="certificate-signature">Ch·ªØ k√Ω</div>
          </div>
        </div>
      </body>
      </html>
    `;
    
    // Ghi n·ªôi dung v√†o c·ª≠a s·ªï m·ªõi
    printWindow.document.open();
    printWindow.document.write(certificateHTML);
    printWindow.document.close();
    
    // In ch·ª©ng ch·ªâ
    setTimeout(() => {
      printWindow.print();
    }, 500);
  }
};

// ==============================================
// MODULE: WEATHER EFFECT
// ==============================================
const WeatherEffect = {
  // D·ªØ li·ªáu c·ªßa module
  data: {
    currentWeather: 'none',
    particles: [],
    isActive: false,
    animationFrame: null
  },
  
  // C√°c ph·∫ßn t·ª≠ DOM
  elements: {
    container: document.getElementById('weather-container'),
    controls: document.querySelector('.weather-controls')
  },
  
  // Kh·ªüi t·∫°o module
  init() {
    // G·∫Øn s·ª± ki·ªán cho n√∫t hi·ªÉn th·ªã weather
    document.getElementById('toggle-weather').addEventListener('click', () => {
      this.toggleControls();
    });
    
    // Thi·∫øt l·∫≠p canvas
    this.setupCanvas();
  },
  
  // Thi·∫øt l·∫≠p canvas
  setupCanvas() {
    // T·∫°o canvas
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    
    // Th√™m canvas v√†o container
    this.elements.container.appendChild(this.canvas);
    
    // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc canvas
    this.resizeCanvas();
    
    // G·∫Øn s·ª± ki·ªán thay ƒë·ªïi k√≠ch th∆∞·ªõc
    window.addEventListener('resize', () => {
      this.resizeCanvas();
    });
  },
  
  // Thay ƒë·ªïi k√≠ch th∆∞·ªõc canvas
  resizeCanvas() {
    // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc canvas b·∫±ng k√≠ch th∆∞·ªõc c·ª≠a s·ªï
    this.canvas.width = window.innerWidth;
    this.canvas.height = window.innerHeight;
  },
  
  // B·∫≠t/t·∫Øt ƒëi·ªÅu khi·ªÉn th·ªùi ti·∫øt
  toggleControls() {
    const { controls } = this.elements;
    
    if (controls.style.display === 'none' || !controls.style.display) {
      controls.style.display = 'flex';
    } else {
      controls.style.display = 'none';
    }
  },
  
  // Thay ƒë·ªïi hi·ªáu ·ª©ng th·ªùi ti·∫øt
  changeWeather(type) {
    // D·ª´ng hi·ªáu ·ª©ng hi·ªán t·∫°i
    this.stopWeather();
    
    // C·∫≠p nh·∫≠t lo·∫°i th·ªùi ti·∫øt
    this.data.currentWeather = type;
    
    // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng m·ªõi n·∫øu kh√¥ng ph·∫£i 'none'
    if (type !== 'none') {
      this.startWeather();
    }
  },
  
  // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng th·ªùi ti·∫øt
  startWeather() {
    const { currentWeather } = this.data;
    
    // Kh·ªüi t·∫°o c√°c h·∫°t
    this.data.particles = [];
    
    // T·∫°o c√°c h·∫°t d·ª±a tr√™n lo·∫°i th·ªùi ti·∫øt
    const particleCount = currentWeather === 'hearts' ? 30 : 100;
    
    for (let i = 0; i < particleCount; i++) {
      let particle;
      
      switch (currentWeather) {
        case 'hearts':
          particle = {
            x: Math.random() * this.canvas.width,
            y: Math.random() * this.canvas.height - this.canvas.height,
            size: Math.random() * 15 + 10,
            weight: Math.random() * 1 + 1,
            directionX: Math.random() * 2 - 1
          };
          break;
          
        case 'snow':
          particle = {
            x: Math.random() * this.canvas.width,
            y: Math.random() * this.canvas.height - this.canvas.height,
            size: Math.random() * 3 + 2,
            weight: Math.random() * 1 + 0.1,
            directionX: Math.random() * 2 - 1
          };
          break;
          
        case 'leaves':
          particle = {
            x: Math.random() * this.canvas.width,
            y: Math.random() * this.canvas.height - this.canvas.height,
            size: Math.random() * 10 + 5,
            weight: Math.random() * 1 + 0.3,
            directionX: Math.random() * 5 - 2.5,
            rotation: Math.random() * 360
          };
          break;
      }
      
      this.data.particles.push(particle);
    }
    
    // Thi·∫øt l·∫≠p tr·∫°ng th√°i
    this.data.isActive = true;
    
    // B·∫Øt ƒë·∫ßu v·∫Ω
    this.animate();
  },
  
  // D·ª´ng hi·ªáu ·ª©ng th·ªùi ti·∫øt
  stopWeather() {
    // D·ª´ng animation
    if (this.data.animationFrame) {
      cancelAnimationFrame(this.data.animationFrame);
    }
    
    // X√≥a canvas
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    
    // Thi·∫øt l·∫≠p tr·∫°ng th√°i
    this.data.isActive = false;
  },
  
  // C·∫≠p nh·∫≠t v√† v·∫Ω c√°c h·∫°t
  animate() {
    // X√≥a canvas
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    
    // C·∫≠p nh·∫≠t v√† v·∫Ω t·ª´ng h·∫°t
    this.data.particles.forEach(p => {
      // C·∫≠p nh·∫≠t v·ªã tr√≠ h·∫°t
      p.y += p.weight;
      p.x += p.directionX;
      
      // Xoay h·∫°t (n·∫øu l√† l√°)
      if (this.data.currentWeather === 'leaves') {
        p.rotation += 0.5;
      }
      
      // V·∫Ω h·∫°t d·ª±a tr√™n lo·∫°i th·ªùi ti·∫øt
      this.ctx.fillStyle = this.data.currentWeather === 'hearts' ? '#ff6f91' : 
                          this.data.currentWeather === 'snow' ? '#ffffff' : 
                          '#a5673f';
      this.ctx.beginPath();
      
      switch (this.data.currentWeather) {
        case 'hearts':
          this.drawHeart(p.x, p.y, p.size);
          break;
          
        case 'snow':
          this.ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
          break;
          
        case 'leaves':
          this.drawLeaf(p.x, p.y, p.size, p.rotation);
          break;
      }
      
      this.ctx.fill();
      
      // Ki·ªÉm tra n·∫øu h·∫°t ra kh·ªèi m√†n h√¨nh
      if (p.y > this.canvas.height) {
        p.y = -10;
        p.x = Math.random() * this.canvas.width;
      }
      
      // Ki·ªÉm tra n·∫øu h·∫°t ra kh·ªèi m√†n h√¨nh theo chi·ªÅu ngang
      if (p.x > this.canvas.width || p.x < 0) {
        p.x = Math.random() * this.canvas.width;
      }
    });
    
    // Ti·∫øp t·ª•c v·∫Ω n·∫øu v·∫´n ƒëang ho·∫°t ƒë·ªông
    if (this.data.isActive) {
      this.data.animationFrame = requestAnimationFrame(() => this.animate());
    }
  },
  
  // V·∫Ω h√¨nh tr√°i tim
  drawHeart(x, y, size) {
    this.ctx.save();
    this.ctx.translate(x, y);
    this.ctx.scale(size / 10, size / 10);
    
    this.ctx.moveTo(0, 0);
    this.ctx.bezierCurveTo(-5, -5, -10, 0, -5, 5);
    this.ctx.bezierCurveTo(0, 10, 5, 5, 0, 0);
    this.ctx.bezierCurveTo(-5, -5, 0, -10, 5, -5);
    this.ctx.bezierCurveTo(10, 0, 5, 5, 0, 0);
    
    this.ctx.restore();
  },
  
  // V·∫Ω h√¨nh l√°
  drawLeaf(x, y, size, rotation) {
    this.ctx.save();
    this.ctx.translate(x, y);
    this.ctx.rotate(rotation * Math.PI / 180);
    this.ctx.scale(size / 10, size / 10);
    
    this.ctx.moveTo(0, -5);
    this.ctx.bezierCurveTo(2, -5, 5, -3, 5, 0);
    this.ctx.bezierCurveTo(5, 5, 2, 8, 0, 10);
    this.ctx.bezierCurveTo(-2, 8, -5, 5, -5, 0);
    this.ctx.bezierCurveTo(-5, -3, -2, -5, 0, -5);
    
    this.ctx.restore();
  }
};

// ==============================================
// MODULE: FIREWORKS 3D
// ==============================================
const Fireworks3D = {
  // D·ªØ li·ªáu c·ªßa module
  data: {
    fireworks: [],
    particles: [],
    isActive: false,
    autoLaunch: true,
    lastLaunch: 0,
    launchInterval: 2000,
    canvas: null,
    ctx: null,
    animationFrame: null,
    hue: 120
  },
  
  // Kh·ªüi t·∫°o module
  init() {
    // Thi·∫øt l·∫≠p canvas
    this.setupCanvas();
    
    // G·∫Øn s·ª± ki·ªán cho n√∫t k√≠ch ho·∫°t ph√°o hoa
    document.getElementById('trigger-fireworks').addEventListener('click', () => {
      if (this.data.isActive) {
        this.stop();
      } else {
        this.start();
      }
    });
  },
  
  // Thi·∫øt l·∫≠p canvas
  setupCanvas() {
    // L·∫•y canvas t·ª´ DOM
    this.data.canvas = document.getElementById('fireworks-canvas');
    this.data.ctx = this.data.canvas.getContext('2d');
    
    // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc canvas
    this.resizeCanvas();
    
    // G·∫Øn s·ª± ki·ªán thay ƒë·ªïi k√≠ch th∆∞·ªõc
    window.addEventListener('resize', () => {
      this.resizeCanvas();
    });
  },
  
  // Thay ƒë·ªïi k√≠ch th∆∞·ªõc canvas
  resizeCanvas() {
    // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc canvas b·∫±ng k√≠ch th∆∞·ªõc c·ª≠a s·ªï
    this.data.canvas.width = window.innerWidth;
    this.data.canvas.height = window.innerHeight;
  },
  
  // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng ph√°o hoa
  start() {
    // Hi·ªÉn th·ªã container
    document.getElementById('fireworks-container').style.display = 'block';
    
    // Thi·∫øt l·∫≠p tr·∫°ng th√°i
    this.data.isActive = true;
    this.data.autoLaunch = true;
    
    // B·∫Øt ƒë·∫ßu v·∫Ω
    this.animate();
  },
  
  // D·ª´ng hi·ªáu ·ª©ng ph√°o hoa
  stop() {
    // D·ª´ng animation
    if (this.data.animationFrame) {
      cancelAnimationFrame(this.data.animationFrame);
    }
    
    // ·∫®n container
    document.getElementById('fireworks-container').style.display = 'none';
    
    // Thi·∫øt l·∫≠p tr·∫°ng th√°i
    this.data.isActive = false;
    this.data.fireworks = [];
    this.data.particles = [];
  },
  
  // T·∫°o ph√°o hoa m·ªõi
  createFirework(startX, startY, targetX, targetY) {
    // T·∫°o ƒë·ªëi t∆∞·ª£ng ph√°o hoa
    this.data.fireworks.push({
      x: startX,
      y: startY,
      startX: startX,
      startY: startY,
      targetX: targetX,
      targetY: targetY,
      distanceToTarget: Math.sqrt(Math.pow(targetX - startX, 2) + Math.pow(targetY - startY, 2)),
      distanceTraveled: 0,
      coordinates: [],
      coordinateCount: 3,
      angle: Math.atan2(targetY - startY, targetX - startX),
      speed: 2,
      acceleration: 1.05,
      brightness: Math.random() * 50 + 50,
      hue: this.data.hue,
      alpha: 1
    });
    
    // TƒÉng gi√° tr·ªã m√†u s·∫Øc
    this.data.hue += 20;
    if (this.data.hue >= 360) {
      this.data.hue = 0;
    }
  },
  
  // T·∫°o c√°c h·∫°t khi ph√°o hoa n·ªï
  createParticles(x, y, hue) {
    // S·ªë l∆∞·ª£ng h·∫°t
    const particleCount = 30;
    
    // T·∫°o c√°c h·∫°t
    for (let i = 0; i < particleCount; i++) {
      // T·∫°o ƒë·ªëi t∆∞·ª£ng h·∫°t
      this.data.particles.push({
        x: x,
        y: y,
        coordinates: [],
        coordinateCount: 5,
        angle: Math.random() * Math.PI * 2,
        speed: Math.random() * 10 + 1,
        friction: 0.95,
        gravity: 1,
        hue: hue,
        brightness: Math.random() * 50 + 50,
        alpha: 1,
        decay: Math.random() * 0.03 + 0.02
      });
    }
  },
  
  // C·∫≠p nh·∫≠t v√† v·∫Ω
  animate() {
    // Ti·∫øp t·ª•c v·∫Ω n·∫øu v·∫´n ƒëang ho·∫°t ƒë·ªông
    if (this.data.isActive) {
      this.data.animationFrame = requestAnimationFrame(() => this.animate());
    }
    
    // Thi·∫øt l·∫≠p ch·∫ø ƒë·ªô ƒë√® m√†u
    this.data.ctx.globalCompositeOperation = 'destination-out';
    
    // X√≥a canvas (v·ªõi ƒë·ªô trong su·ªët)
    this.data.ctx.fillStyle = 'rgba(0, 0, 0, 0.2)';
    this.data.ctx.fillRect(0, 0, this.data.canvas.width, this.data.canvas.height);
    
    // Thi·∫øt l·∫≠p ch·∫ø ƒë·ªô ƒë√® m√†u b√¨nh th∆∞·ªùng
    this.data.ctx.globalCompositeOperation = 'lighter';
    
    // C·∫≠p nh·∫≠t v√† v·∫Ω c√°c ph√°o hoa
    this.updateFireworks();
    
    // C·∫≠p nh·∫≠t v√† v·∫Ω c√°c h·∫°t
    this.updateParticles();
    
    // T·ª± ƒë·ªông ph√≥ng ph√°o hoa
    if (this.data.autoLaunch && Date.now() - this.data.lastLaunch > this.data.launchInterval) {
      // Ph√≥ng ph√°o hoa m·ªõi
      const startX = this.data.canvas.width / 2;
      const startY = this.data.canvas.height;
      const targetX = Math.random() * this.data.canvas.width;
      const targetY = Math.random() * this.data.canvas.height / 2;
      
      this.createFirework(startX, startY, targetX, targetY);
      
      // C·∫≠p nh·∫≠t th·ªùi gian ph√≥ng
      this.data.lastLaunch = Date.now();
      
      // Thay ƒë·ªïi kho·∫£ng th·ªùi gian ph√≥ng
      this.data.launchInterval = Math.random() * 1000 + 1000;
    }
  },
  
  // C·∫≠p nh·∫≠t v√† v·∫Ω c√°c ph√°o hoa
  updateFireworks() {
    // L·∫∑p qua t·∫•t c·∫£ c√°c ph√°o hoa
    for (let i = this.data.fireworks.length - 1; i >= 0; i--) {
      const firework = this.data.fireworks[i];
      
      // C·∫≠p nh·∫≠t t·ªça ƒë·ªô
      const vx = Math.cos(firework.angle) * firework.speed;
      const vy = Math.sin(firework.angle) * firework.speed;
      
      firework.speed *= firework.acceleration;
      firework.distanceTraveled = Math.sqrt(Math.pow(firework.x - firework.startX, 2) + Math.pow(firework.y - firework.startY, 2));
      
      firework.x += vx;
      firework.y += vy;
      
      // Ki·ªÉm tra n·∫øu ph√°o hoa ƒë√£ ƒë·∫øn ƒë√≠ch
      if (firework.distanceTraveled >= firework.distanceToTarget) {
        // T·∫°o c√°c h·∫°t khi ph√°o hoa n·ªï
        this.createParticles(firework.targetX, firework.targetY, firework.hue);
        
        // X√≥a ph√°o hoa
        this.data.fireworks.splice(i, 1);
      } else {
        // V·∫Ω ph√°o hoa
        this.data.ctx.beginPath();
        this.data.ctx.arc(firework.x, firework.y, 3, 0, Math.PI * 2);
        this.data.ctx.fillStyle = `hsla(${firework.hue}, 100%, ${firework.brightness}%, ${firework.alpha})`;
        this.data.ctx.fill();
      }
    }
  },
  
  // C·∫≠p nh·∫≠t v√† v·∫Ω c√°c h·∫°t
  updateParticles() {
    // L·∫∑p qua t·∫•t c·∫£ c√°c h·∫°t
    for (let i = this.data.particles.length - 1; i >= 0; i--) {
      const particle = this.data.particles[i];
      
      // C·∫≠p nh·∫≠t t·ªça ƒë·ªô
      particle.x += Math.cos(particle.angle) * particle.speed;
      particle.y += Math.sin(particle.angle) * particle.speed + particle.gravity;
      
      // √Åp d·ª•ng ma s√°t
      particle.speed *= particle.friction;
      
      // Gi·∫£m ƒë·ªô trong su·ªët
      particle.alpha -= particle.decay;
      
      // Ki·ªÉm tra n·∫øu h·∫°t ƒë√£ bi·∫øn m·∫•t
      if (particle.alpha <= 0) {
        this.data.particles.splice(i, 1);
      } else {
        // V·∫Ω h·∫°t
        this.data.ctx.beginPath();
        this.data.ctx.arc(particle.x, particle.y, 3, 0, Math.PI * 2);
        this.data.ctx.fillStyle = `hsla(${particle.hue}, 100%, ${particle.brightness}%, ${particle.alpha})`;
        this.data.ctx.fill();
      }
    }
  }
};

// ==============================================
// MODULE: EXTRA CONTROLS
// ==============================================
const ExtraControls = {
  // Kh·ªüi t·∫°o module
  init() {
    // M·∫∑c ƒë·ªãnh ·∫©n c√°c ƒëi·ªÅu khi·ªÉn b·ªï sung
    App.elements.extraControls.style.display = 'none';
  }
};

// ==============================================
// KH·ªûI CH·∫†Y ·ª®NG D·ª§NG
// ==============================================
document.addEventListener('DOMContentLoaded', function() {
  // Kh·ªüi t·∫°o ·ª©ng d·ª•ng
  App.init();
});
// Kh·ªüi t·∫°o bi·∫øn l·ªãch s·ª≠
App.state.history = [];

// Th√™m ch·ª©c nƒÉng ƒëi·ªÅu h∆∞·ªõng
function initNavigation() {
  // G·∫Øn s·ª± ki·ªán cho n√∫t Trang ch·ªß
  document.getElementById('nav-home').addEventListener('click', () => {
    navigateTo('section-home');
  });
  
  // G·∫Øn s·ª± ki·ªán cho n√∫t Tr·∫Øc nghi·ªám
  document.getElementById('nav-quiz').addEventListener('click', () => {
    navigateTo('section-quiz');
    QuizSection.showQuestion();
  });
  
  // G·∫Øn s·ª± ki·ªán cho n√∫t Tr√≤ ch∆°i tr√≠ nh·ªõ
  document.getElementById('nav-memory').addEventListener('click', () => {
    navigateTo('section-memory');
    MemoryGame.createCards();
  });
  
  // G·∫Øn s·ª± ki·ªán cho n√∫t Gh√©p h√¨nh
  document.getElementById('nav-puzzle').addEventListener('click', () => {
    navigateTo('section-puzzle');
    PuzzleGame.createPuzzlePieces();
    PuzzleGame.startTimer();
  });
  
  // G·∫Øn s·ª± ki·ªán cho n√∫t Ph√≤ng tr∆∞ng b√†y
  document.getElementById('nav-gallery').addEventListener('click', () => {
    Gallery3D.show();
  });
  
  // G·∫Øn s·ª± ki·ªán cho n√∫t Thi·ªáp ch√∫c m·ª´ng
  document.getElementById('nav-cards').addEventListener('click', () => {
    PasswordScreen.show();
  });
  
  // G·∫Øn s·ª± ki·ªán cho n√∫t Quay l·∫°i
  document.getElementById('back-button').addEventListener('click', () => {
    goBack();
  });
  
  // G·∫Øn s·ª± ki·ªán cho n√∫t B·∫Øt ƒë·∫ßu h√†nh tr√¨nh
  document.getElementById('start-journey').addEventListener('click', () => {
    navigateTo('section-video');
  });
}

// H√†m ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn section theo ID
function navigateTo(sectionId) {
  // L∆∞u section hi·ªán t·∫°i v√†o l·ªãch s·ª≠
  if (App.state.currentSection >= 0) {
    const currentSectionElement = App.elements.sections[App.state.currentSection];
    if (currentSectionElement) {
      App.state.history.push(currentSectionElement.id);
    }
  }
  
  // T√¨m index c·ªßa section m·ªõi
  const newIndex = Array.from(App.elements.sections).findIndex(section => section.id === sectionId);
  
  if (newIndex >= 0) {
    // Hi·ªÉn th·ªã section m·ªõi
    App.showSection(newIndex);
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i active cho menu
    updateNavigation(sectionId);
  }
}

// H√†m quay l·∫°i section tr∆∞·ªõc ƒë√≥
function goBack() {
  if (App.state.history.length > 0) {
    // L·∫•y section tr∆∞·ªõc ƒë√≥ t·ª´ l·ªãch s·ª≠
    const previousSectionId = App.state.history.pop();
    
    // T√¨m index c·ªßa section tr∆∞·ªõc ƒë√≥
    const prevIndex = Array.from(App.elements.sections).findIndex(section => section.id === previousSectionId);
    
    if (prevIndex >= 0) {
      // Hi·ªÉn th·ªã section tr∆∞·ªõc ƒë√≥
      App.showSection(prevIndex);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i active cho menu
      updateNavigation(previousSectionId);
    }
  } else {
    // N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠, quay v·ªÅ trang ch·ªß
    navigateTo('section-home');
  }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i active cho menu
function updateNavigation(activeSectionId) {
  // X√≥a active kh·ªèi t·∫•t c·∫£ c√°c m·ª•c
  document.querySelectorAll('.nav-item').forEach(item => {
    item.classList.remove('active');
  });
  
  // Th√™m active v√†o m·ª•c t∆∞∆°ng ·ª©ng
  let activeNavId = '';
  
  switch(activeSectionId) {
    case 'section-home':
      activeNavId = 'nav-home';
      break;
    case 'section-quiz':
      activeNavId = 'nav-quiz';
      break;
    case 'section-memory':
      activeNavId = 'nav-memory';
      break;
    case 'section-puzzle':
      activeNavId = 'nav-puzzle';
      break;
    case 'section-gallery':
      activeNavId = 'nav-gallery';
      break;
    default:
      break;
  }
  
  if (activeNavId) {
    document.getElementById(activeNavId).classList.add('active');
  }
}

// G·ªçi h√†m kh·ªüi t·∫°o ƒëi·ªÅu h∆∞·ªõng
document.addEventListener('DOMContentLoaded', function() {
  // Kh·ªüi t·∫°o ƒëi·ªÅu h∆∞·ªõng
  initNavigation();
  
  // Kh·ªüi t·∫°o ·ª©ng d·ª•ng
  App.init();
});